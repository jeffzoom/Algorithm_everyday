// 递推公式dp[i] = dp[i - 1] + dp[i - 2]
// 初始化dp[1] = 1，dp[2] = 2
// 这不就是差分方程嘛

/*
首先是dp[i - 1]，上i-1层楼梯，有dp[i - 1]种方法，那么再一步跳一个台阶不就是dp[i]了么。
还有就是dp[i - 2]，上i-2层楼梯，有dp[i - 2]种方法，那么再一步跳两个台阶不就是dp[i]了么。
那么dp[i]就是 dp[i - 1]与dp[i - 2]之和！所以dp[i] = dp[i - 1] + dp[i - 2] 。
且dp[i - 1]和dp[i - 2]的方案不重合，废话，上不同层的台阶，方案怎么可能重合嘛
在推导dp[i]的时候，一定要时刻想着dp[i]的定义，否则容易跑偏。这体现出确定dp数组以及下标的含义的重要性！
*/

/*
1、确定dp数组（dp table）以及下标的含义     dp[i]： 爬到第i层楼梯，有dp[i]种方法
2、确定递推公式     dp[i] = dp[i - 1] + dp[i - 2]
3、dp数组如何初始化 不考虑dp[0]如何初始化，只初始化dp[1] = 1，dp[2] = 2，然后从i = 3开始递推
4、确定遍历顺序     本题遍历顺序从前向后遍历的
5、举例推导dp数组   如n=5
*/

class Solution {
public:
    int climbStairs(int n) {
        vector<int> dp{0, 1, 2};
        while (dp.size() - 1 < n) { // n=3, 0 1 2 3
            dp.push_back(*(dp.end() - 1) + *(dp.end() - 2));
        }
        return dp[n];

    }
};